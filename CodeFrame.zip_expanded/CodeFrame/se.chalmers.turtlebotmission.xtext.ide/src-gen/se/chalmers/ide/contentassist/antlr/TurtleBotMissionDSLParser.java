/*
 * generated by Xtext 2.10.0
 */
package se.chalmers.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import se.chalmers.ide.contentassist.antlr.internal.InternalTurtleBotMissionDSLParser;
import se.chalmers.services.TurtleBotMissionDSLGrammarAccess;

public class TurtleBotMissionDSLParser extends AbstractContentAssistParser {

	@Inject
	private TurtleBotMissionDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTurtleBotMissionDSLParser createParser() {
		InternalTurtleBotMissionDSLParser result = new InternalTurtleBotMissionDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTaskAccess().getAlternatives(), "rule__Task__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getTurtleBotAccess().getGroup(), "rule__TurtleBot__Group__0");
					put(grammarAccess.getTurtleBotAccess().getGroup_10(), "rule__TurtleBot__Group_10__0");
					put(grammarAccess.getTurtleBotAccess().getGroup_15(), "rule__TurtleBot__Group_15__0");
					put(grammarAccess.getTurtleBotAccess().getGroup_17(), "rule__TurtleBot__Group_17__0");
					put(grammarAccess.getTurtleBotAccess().getGroup_17_3(), "rule__TurtleBot__Group_17_3__0");
					put(grammarAccess.getAreaAccess().getGroup(), "rule__Area__Group__0");
					put(grammarAccess.getAreaAccess().getGroup_3(), "rule__Area__Group_3__0");
					put(grammarAccess.getAreaAccess().getGroup_4(), "rule__Area__Group_4__0");
					put(grammarAccess.getWaypointTypeAccess().getGroup(), "rule__WaypointType__Group__0");
					put(grammarAccess.getWayPointAccess().getGroup(), "rule__WayPoint__Group__0");
					put(grammarAccess.getWayPointAccess().getGroup_3(), "rule__WayPoint__Group_3__0");
					put(grammarAccess.getWayPointAccess().getGroup_4(), "rule__WayPoint__Group_4__0");
					put(grammarAccess.getWayPointAccess().getGroup_8(), "rule__WayPoint__Group_8__0");
					put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
					put(grammarAccess.getMissionAccess().getGroup_6(), "rule__Mission__Group_6__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getLineTaskAccess().getGroup(), "rule__LineTask__Group__0");
					put(grammarAccess.getLineTaskAccess().getGroup_5(), "rule__LineTask__Group_5__0");
					put(grammarAccess.getShortestPathTaskAccess().getGroup(), "rule__ShortestPathTask__Group__0");
					put(grammarAccess.getShortestPathTaskAccess().getGroup_5(), "rule__ShortestPathTask__Group_5__0");
					put(grammarAccess.getReturnToStartTaskAccess().getGroup(), "rule__ReturnToStartTask__Group__0");
					put(grammarAccess.getTurtleBotAccess().getNameAssignment_1(), "rule__TurtleBot__NameAssignment_1");
					put(grammarAccess.getTurtleBotAccess().getBot_startAssignment_4(), "rule__TurtleBot__Bot_startAssignment_4");
					put(grammarAccess.getTurtleBotAccess().getAreaAssignment_6(), "rule__TurtleBot__AreaAssignment_6");
					put(grammarAccess.getTurtleBotAccess().getWaypointtypesAssignment_9(), "rule__TurtleBot__WaypointtypesAssignment_9");
					put(grammarAccess.getTurtleBotAccess().getWaypointtypesAssignment_10_1(), "rule__TurtleBot__WaypointtypesAssignment_10_1");
					put(grammarAccess.getTurtleBotAccess().getWaypointsAssignment_14(), "rule__TurtleBot__WaypointsAssignment_14");
					put(grammarAccess.getTurtleBotAccess().getWaypointsAssignment_15_1(), "rule__TurtleBot__WaypointsAssignment_15_1");
					put(grammarAccess.getTurtleBotAccess().getMissionsAssignment_17_2(), "rule__TurtleBot__MissionsAssignment_17_2");
					put(grammarAccess.getTurtleBotAccess().getMissionsAssignment_17_3_1(), "rule__TurtleBot__MissionsAssignment_17_3_1");
					put(grammarAccess.getAreaAccess().getXmaxAssignment_3_1(), "rule__Area__XmaxAssignment_3_1");
					put(grammarAccess.getAreaAccess().getYmaxAssignment_4_1(), "rule__Area__YmaxAssignment_4_1");
					put(grammarAccess.getWaypointTypeAccess().getNameAssignment_2(), "rule__WaypointType__NameAssignment_2");
					put(grammarAccess.getWayPointAccess().getNameAssignment_1(), "rule__WayPoint__NameAssignment_1");
					put(grammarAccess.getWayPointAccess().getCoord_xAssignment_3_1(), "rule__WayPoint__Coord_xAssignment_3_1");
					put(grammarAccess.getWayPointAccess().getCoord_yAssignment_4_1(), "rule__WayPoint__Coord_yAssignment_4_1");
					put(grammarAccess.getWayPointAccess().getWaypointtypesAssignment_7(), "rule__WayPoint__WaypointtypesAssignment_7");
					put(grammarAccess.getWayPointAccess().getWaypointtypesAssignment_8_1(), "rule__WayPoint__WaypointtypesAssignment_8_1");
					put(grammarAccess.getMissionAccess().getNameAssignment_1(), "rule__Mission__NameAssignment_1");
					put(grammarAccess.getMissionAccess().getTaskAssignment_5(), "rule__Mission__TaskAssignment_5");
					put(grammarAccess.getMissionAccess().getTaskAssignment_6_1(), "rule__Mission__TaskAssignment_6_1");
					put(grammarAccess.getLineTaskAccess().getWaypointsAssignment_4(), "rule__LineTask__WaypointsAssignment_4");
					put(grammarAccess.getLineTaskAccess().getWaypointsAssignment_5_1(), "rule__LineTask__WaypointsAssignment_5_1");
					put(grammarAccess.getShortestPathTaskAccess().getWaypointsAssignment_4(), "rule__ShortestPathTask__WaypointsAssignment_4");
					put(grammarAccess.getShortestPathTaskAccess().getWaypointsAssignment_5_1(), "rule__ShortestPathTask__WaypointsAssignment_5_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalTurtleBotMissionDSLParser typedParser = (InternalTurtleBotMissionDSLParser) parser;
			typedParser.entryRuleTurtleBot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TurtleBotMissionDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TurtleBotMissionDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
