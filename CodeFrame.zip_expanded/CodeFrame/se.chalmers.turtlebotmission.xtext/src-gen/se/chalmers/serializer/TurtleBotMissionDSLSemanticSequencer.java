/*
 * generated by Xtext 2.10.0
 */
package se.chalmers.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import se.chalmers.services.TurtleBotMissionDSLGrammarAccess;
import turtlebotmission.Area;
import turtlebotmission.LineTask;
import turtlebotmission.Mission;
import turtlebotmission.ReturnToStartTask;
import turtlebotmission.ShortestPathTask;
import turtlebotmission.TurtleBot;
import turtlebotmission.TurtlebotmissionPackage;
import turtlebotmission.WayPoint;
import turtlebotmission.WaypointType;

@SuppressWarnings("all")
public class TurtleBotMissionDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TurtleBotMissionDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TurtlebotmissionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TurtlebotmissionPackage.AREA:
				sequence_Area(context, (Area) semanticObject); 
				return; 
			case TurtlebotmissionPackage.LINE_TASK:
				sequence_LineTask(context, (LineTask) semanticObject); 
				return; 
			case TurtlebotmissionPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case TurtlebotmissionPackage.RETURN_TO_START_TASK:
				sequence_ReturnToStartTask(context, (ReturnToStartTask) semanticObject); 
				return; 
			case TurtlebotmissionPackage.SHORTEST_PATH_TASK:
				sequence_ShortestPathTask(context, (ShortestPathTask) semanticObject); 
				return; 
			case TurtlebotmissionPackage.TURTLE_BOT:
				sequence_TurtleBot(context, (TurtleBot) semanticObject); 
				return; 
			case TurtlebotmissionPackage.WAY_POINT:
				sequence_WayPoint(context, (WayPoint) semanticObject); 
				return; 
			case TurtlebotmissionPackage.WAYPOINT_TYPE:
				sequence_WaypointType(context, (WaypointType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Area returns Area
	 *
	 * Constraint:
	 *     (xmax=EInt? ymax=EInt?)
	 */
	protected void sequence_Area(ISerializationContext context, Area semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns LineTask
	 *     LineTask returns LineTask
	 *
	 * Constraint:
	 *     (waypoints+=[WayPoint|EString] waypoints+=[WayPoint|EString]*)
	 */
	protected void sequence_LineTask(ISerializationContext context, LineTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (name=EString task+=Task task+=Task*)
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns ReturnToStartTask
	 *     ReturnToStartTask returns ReturnToStartTask
	 *
	 * Constraint:
	 *     {ReturnToStartTask}
	 */
	protected void sequence_ReturnToStartTask(ISerializationContext context, ReturnToStartTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns ShortestPathTask
	 *     ShortestPathTask returns ShortestPathTask
	 *
	 * Constraint:
	 *     (waypoints+=[WayPoint|EString] waypoints+=[WayPoint|EString]*)
	 */
	protected void sequence_ShortestPathTask(ISerializationContext context, ShortestPathTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TurtleBot returns TurtleBot
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         bot_start=[WayPoint|EString] 
	 *         area=Area 
	 *         waypointtypes+=WaypointType 
	 *         waypointtypes+=WaypointType* 
	 *         waypoints+=WayPoint 
	 *         waypoints+=WayPoint* 
	 *         (missions+=Mission missions+=Mission*)?
	 *     )
	 */
	protected void sequence_TurtleBot(ISerializationContext context, TurtleBot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WayPoint returns WayPoint
	 *
	 * Constraint:
	 *     (name=EString coord_x=EInt? coord_y=EInt? waypointtypes+=[WaypointType|EString] waypointtypes+=[WaypointType|EString]*)
	 */
	protected void sequence_WayPoint(ISerializationContext context, WayPoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WaypointType returns WaypointType
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_WaypointType(ISerializationContext context, WaypointType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TurtlebotmissionPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TurtlebotmissionPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWaypointTypeAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
